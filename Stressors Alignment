---
title: "Stressors"
output: pdf_document
date: "2023-04-12"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.

```{r}
#function for factor score adjustment
aligned.factor.scores <- function(lambda,nu,y){
  #calculate inverse matrix
  lambda1 <- ginv((lambda))
  #create matrix for nu
  ns <- nrow(y)
  nus <- matrix(nu,nrow=ns, ncol=length(nu), byrow=T)
  # y - nu
  y_nu <- y - nu
  # f = inv(lambda)*(y-nu)
  F <- lambda1 %*% t(as.matrix(y_nu))
}

# primary stressors (4 items)
CS <- c('primary_stressors_1','primary_stressors_2',
        'primary_stressors_3','primary_stressors_4')
cfa.model.CP <- 'CP =~primary_stressors_1 + primary_stressors_2 +
primary_stressors_3 + primary_stressors_4'

# sps (3 items)
items.PSUP <- c('perceived_support_1_midneutral','perceived_support_2_midneutral',
                'perceived_support_3_midneutral')
cfa.model.PSUP <-'PSUP =~ perceived_support_1_midneutral + 
perceived_support_2_midneutral + perceived_support_3_midneutral'

#load data

data <- read.csv('data.mi.csv')

#extract languages with n>=100
n.langs <- table(data$UserLanguage)
list.langs <- labels(n.langs)[[1]]
langs.include <- list.langs[n.langs>=100]

n.include <- n.langs[n.langs>=100]

#extract data
for (i in 1:length(langs.include)){
  if (i == 1){
    data.mi <-data[data$UserLanguage == langs.include[i],]
  }else{
    current <- data[data$UserLanguage == langs.include[i],]
    data.mi <- rbind(data.mi,current)
  }
}

# set and examine fitmeasures
fits <-c('rmsea.scaled','srmr','cfi.scaled','tli.scaled')


#####
# 1. compliance alignment

# do alignment
#extract parameters
par.CS <- invariance_alignment_cfa_config(dat = data.mi[,CS],
                                          group = data.mi$UserLanguage)
#do alignment
mod1.CS <- invariance.alignment(lambda = par.CS$lambda, nu =
                                  par.CS$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
mod1.CS$es.invariance['R2',]
#loadings intercepts 
#0.9655184  0.9958727 well done


#####
# 2. sps alignment

# do alignment
#extract parameters
par.sps <- invariance_alignment_cfa_config(dat = data.mi[,items.PSUP],
                                           group = data.mi$UserLanguage)
#do alignment
mod1.sps <- invariance.alignment(lambda = par.sps$lambda, nu =
                                   par.sps$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
mod1.sps$es.invariance['R2',]
#loadings intercepts 
#0.9924918  0.9987810 well done


#####
# calculate factor scores

for (i in 1:length(langs.include)){
  if (i == 1){
    # create new matrix
    data.aligned <- data.mi[data.mi$UserLanguage==langs.include[i],] 
    # aligned factor score
    F.CS <- aligned.factor.scores(mod1.CS$lambda.aligned[i,],
                                  mod1.CS$nu.aligned[i,],
                                  data.mi[data.mi$UserLanguage==langs.include[i],CS])
    F.PSUP <- aligned.factor.scores(mod1.sps$lambda.aligned[i,],
                                    mod1.sps$nu.aligned[i,],
                                    data.mi[data.mi$UserLanguage==langs.include[i],items.PSUP])
    
    data.aligned$CS <-t(F.CS)
    data.aligned$PSUP <-t(F.PSUP)
  }else
  {
    #bind
    current <- data.mi[data.mi$UserLanguage==langs.include[i],]
    F.CS <- aligned.factor.scores(mod1.CS$lambda.aligned[i,],
                                  mod1.CS$nu.aligned[i,],
                                  current[,CS])
    F.PSUP <- aligned.factor.scores(mod1.sps$lambda.aligned[i,],
                                    mod1.sps$nu.aligned[i,],
                                    current[,items.PSUP])
    
    current$CS <-t(F.CS)
    current$PSUP <-t(F.PSUP)
    
    data.aligned <- rbind(data.aligned,current)
  }
}


# filtering by country n>= 30
country.30 <-table(data.aligned$residing_country) >=30

n.country <-table(data.aligned$residing_country)
list.country <- labels(n.country)[[1]]
country.include <- list.country[n.country>=30]
n.include.c <- n.country[n.country>=30]

#extract data
for (i in 1:length(country.include)){
  if (i == 1){
    data.filtered <- data.aligned[(data.aligned$residing_country == 
                                     country.include[i]) & !is.na(
                                       data.aligned$residing_country
                                     ),]
  }else{
    current <- data.aligned[(data.aligned$residing_country == country.include[i])
                            & !is.na(
                              data.aligned$residing_country
                            ),]
    data.filtered <- rbind(data.filtered,current)
  }
}

# save csv
write.csv(data.filtered,file='Stressors_Alignment_byitself.csv',row.names = F)
```

